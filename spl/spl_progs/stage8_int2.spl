alias phySP S0;
phySP = ([PTBR + 2*(SP/512)] * 512) + (SP % 512);
alias syscall S1;
syscall = [phySP - 1];	//System Call No from the stack
alias currentPID S6;				//Process ID of the current process
currentPID = (PTBR - 1024)/8;			//Each Per-process Page Table 8 words
alias currentPCB S7;
currentPCB = READY_LIST + 32 * currentPID;	//PCB for the Process

if (syscall == 2) then	//Open System Call
   alias filename S2;
   filename = [phySP - 3];		//Arguement from the stack	
   alias fatentry S3;
   fatentry = FAT;
   while ( fatentry < DISK_LIST && [fatentry] != filename) do	//Search FAT Table in Memory			
	fatentry = fatentry + 8;
   endwhile;	
   if(fatentry == DISK_LIST) then					//File not found in Disk
	[phySP - 2] = -1;					//Return Error -1			
   else
	alias fatIndex S4;					//Calculate FAT Index from FAT Entry
	fatIndex = (fatentry - FAT)/8;				//Each Entry is of 8 words
	alias softIndex S5;					//Check whether the file is already open
	softIndex = 0;						//Pointer to the entry in System Wide Open File Table
	while (softIndex < 64 && [FILE_TABLE + 2*softIndex] != fatIndex) do		//Total 64 files can be opened at a time
		//Each entry in System Wide Open Table is 2 words
		softIndex = softIndex + 1;
	endwhile;
	if (softIndex == 64) then				//If no file with name is found, search for free
		softIndex = 0;					//slot in the Sys Wide Open Tab
		while (softIndex < 64 && [FILE_TABLE + 2*softIndex] != -1) do	//Free Entry Index = -1
			softIndex = softIndex + 1;
		endwhile;
		if (softIndex == 64) then				//If no free entry is found
			[phySP - 2] = -1;
                                			//Return Value is -1 (Error)
		
	endif;			
	alias ppftIndex S8;
	ppftIndex = 15;					//Per-process page table index
	while (ppftIndex < 31 && [currentPCB + ppftIndex] != -1) do
		ppftIndex = ppftIndex + 2;		//Search for free entry in PPFT
	endwhile;
	if (ppftIndex == 31) then
		[phySP - 2] = -1;			//Error no free entry found
	else
		[currentPCB + ppftIndex] = softIndex;	//Pointer to the new entry to the SOFT Index
		[currentPCB + ppftIndex + 1] = 0;	//lseek position is 0 initially
		[FILE_TABLE + 2*softIndex] = fatIndex;	//fatIndex in the entry of SOFT 
		[FILE_TABLE + 2*softIndex + 1] = [FILE_TABLE + 2*softIndex + 1] + 1;
							//Inc the value of File Open Count by 1				
		ppftIndex = (ppftIndex - 15)/2;	
		print(ppftindex);	//PPFT Index Calculation
		[phySP - 2] = ppftIndex;		//Returns PPFT Index (fileDescriptor) on success		
	endif; 	
endif;	
endif;
//if (syscall == 3) then	//Close System Call
//	alias fileDesc S2;
//	fileDesc = [phySP - 3];		//Arguement from the stack
//	alias softIndex S3;
//	softIndex = [currentPCB + 15 + 2*fileDesc];	//Pointer to SWOFT
//	if (fileDesc < 0 || fileDesc > 7 || [FILE_TABLE + 2*softIndex] == -1) then
//		[phySP - 2] = -1;
//	else
//		[FILE_TABLE + 2*softIndex + 1] = [FILE_TABLE + 2*softIndex + 1] - 1;
//		if ([FILE_TABLE + 2*softIndex + 1] == 0) then
//			[FILE_TABLE + 2*softIndex] = -1;		
//		endif;
//		[currentPCB + 15 + 2*fileDesc] = -1;
//		[currentPCB + 15 + 2*fileDesc + 1] = -1;
//		[phySP - 2] = 0;	
//	endif;	
//endif;
ireturn;
